// src/components/QrAddProduct.tsx
import { useEffect, useRef, useState } from "react";
import { BrowserMultiFormatReader } from "@zxing/browser";
import { useFetchProduct } from "@/hooks/useFetchProduct";

export default function QrAddProduct({ onAddToCart }) {
  const videoRef = useRef(null);
  const streamRef = useRef(null);
  const controlsRef = useRef(null);

  const [devices, setDevices] = useState([]);
  const [deviceId, setDeviceId] = useState(undefined);
  const [torchOn, setTorchOn] = useState(false);
  const [scanning, setScanning] = useState(false);
  const [lastText, setLastText] = useState("");
  const [product, setProduct] = useState(null);

  const { fetchBySku, loading, error, setError } = useFetchProduct();

  // Li·ªát k√™ camera
  useEffect(() => {
    (async () => {
      try {
        await navigator.mediaDevices.getUserMedia({
          video: true,
          audio: false,
        });
        const all = await navigator.mediaDevices.enumerateDevices(); // get all media devices in the system
        const cams = all.filter((d) => d.kind === "videoinput");
        setDevices(cams);
        // ∆∞u ti√™n camera sau
        const back = cams.find((c) => /back|rear|environment/i.test(c.label));
        setDeviceId(back?.deviceId || cams[0]?.deviceId);
      } catch (e) {
        setError("Kh√¥ng truy c·∫≠p ƒë∆∞·ª£c danh s√°ch camera", e);
      }
    })();
  }, [setError]);

  // B·∫≠t/t·∫Øt torch (n·∫øu h·ªó tr·ª£)
  async function applyTorch(on) {
    try {
      const tracks = streamRef.current?.getVideoTracks?.() || [];
      const track = tracks[0];
      // @ts-ignore: constraint types
      await track?.applyConstraints?.({ advanced: [{ torch: on }] });
      setTorchOn(on);
    } catch {
      // thi·∫øt b·ªã kh√¥ng h·ªó tr·ª£ torch, im l·∫∑ng
    }
  }

  // Kh·ªüi ƒë·ªông/qu√©t
  useEffect(() => {
    if (!deviceId) return;

    const reader = new BrowserMultiFormatReader();
    setScanning(true);

    (async () => {
      try {
        const video = videoRef.current;
        const { controls, stream } = await reader.decodeFromVideoDevice(
          deviceId,
          video,
          (result, err) => {
            if (result) handleDecode(result.getText());
          }
        );
        controlsRef.current = controls;
        streamRef.current = stream;
      } catch (e) {
        setError("Kh√¥ng th·ªÉ m·ªü camera. H√£y ki·ªÉm tra quy·ªÅn truy c·∫≠p.");
        setScanning(false);
      }
    })();

    return () => {
      controlsRef.current?.stop();
      streamRef.current?.getTracks()?.forEach((t) => t.stop());
      controlsRef.current = null;
      streamRef.current = null;
      setScanning(false);
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [deviceId]);

  // X·ª≠ l√Ω k·∫øt qu·∫£ decode
  async function handleDecode(text) {
    // tr√°nh spam ƒë·ªçc tr√πng
    if (text === lastText) return;
    setLastText(text);

    // gi·∫£ ƒë·ªãnh QR ch·ª©a SKU thu·∫ßn (n·∫øu b·∫°n encode JSON, t√°ch ·ªü ƒë√¢y)
    const sku = parseSku(text);
    if (!sku) return;

    const data = await fetchBySku(sku);
    if (data) {
      setProduct(data);
      // t·∫°m d·ª´ng 1.5s r·ªìi cho qu√©t l·∫°i
      setScanning(false);
      setTimeout(() => setScanning(true), 1500);
    }
  }

  function parseSku(raw) {
    try {
      // TH1: QR l√† JSON: {"sku":"BK-001", ...}
      const obj = JSON.parse(raw);
      if (obj?.sku) return String(obj.sku);
    } catch {
      /* kh√¥ng ph·∫£i JSON, b·ªè qua */
    }
    // TH2: QR l√† chu·ªói SKU tr·ª±c ti·∫øp
    return raw?.trim();
  }

  // Upload ·∫£nh QR d·ª± ph√≤ng
  async function handlePickFile(e) {
    const file = e.target.files?.[0];
    if (!file) return;
    const url = URL.createObjectURL(file);
    const reader = new BrowserMultiFormatReader();
    try {
      const img = new Image();
      img.src = url;
      await img.decode(); // ƒë·∫£m b·∫£o ·∫£nh ƒë√£ load
      console.log("Decoding from image", img);
      const result = await reader.decodeFromImage(img);
      console.log("Decode result", result.getText());
      handleDecode(result.getText());
    } catch {
      setError("Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c m√£ QR t·ª´ ·∫£nh.");
    } finally {
      URL.revokeObjectURL(url);
    }
  }

  return (
    <div className="w-full max-w-3xl mx-auto p-4">
      <h2 className="text-2xl font-semibold">Qu√©t m√£ QR ƒë·ªÉ th√™m s·∫£n ph·∫©m</h2>

      {/* Khu camera */}
      <div className="mt-4 grid gap-3 sm:grid-cols-[1fr_auto]">
        <div className="relative rounded-xl overflow-hidden bg-black aspect-[3/2]">
          <video
            ref={videoRef}
            className="w-full h-full object-cover"
            autoPlay
            muted
            playsInline
          />
          {/* khung nh·∫Øm */}
          <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
            <div className="w-56 h-56 border-2 border-white/80 rounded-xl" />
          </div>
          {/* tr·∫°ng th√°i */}
          <div className="absolute left-3 bottom-3 text-xs text-white/90 bg-black/40 px-2 py-1 rounded">
            {scanning ? "ƒêang qu√©t..." : "T·∫°m d·ª´ng"}
          </div>
        </div>

        <div className="flex flex-col gap-2">
          {/* ch·ªçn camera */}
          <label className="text-sm font-medium">Ch·ªçn camera</label>
          <select
            className="border rounded-lg px-3 py-2"
            value={deviceId}
            onChange={(e) => setDeviceId(e.target.value)}
          >
            {devices.map((d) => (
              <option key={d.deviceId} value={d.deviceId}>
                {d.label || `Camera ${d.deviceId.slice(0, 6)}...`}
              </option>
            ))}
          </select>

          <button
            type="button"
            className="mt-2 inline-flex items-center justify-center rounded-lg border px-3 py-2 hover:bg-gray-50"
            onClick={() => applyTorch(!torchOn)}
          >
            {torchOn ? "T·∫Øt ƒë√®n" : "B·∫≠t ƒë√®n"} üî¶
          </button>

          <div className="mt-4">
            <label className="text-sm font-medium">Ho·∫∑c t·∫£i ·∫£nh QR</label>
            <input
              type="file"
              accept="image/*"
              className="mt-1 block w-full text-sm"
              onChange={handlePickFile}
            />
          </div>
        </div>
      </div>

      {/* Th√¥ng b√°o l·ªói */}
      {error && <div className="mt-3 text-sm text-red-600">{error}</div>}

      {/* K·∫øt qu·∫£ qu√©t g·∫ßn nh·∫•t */}
      {lastText && (
        <div className="mt-3 text-xs text-gray-500">
          QR g·∫ßn nh·∫•t: <span className="font-mono">{lastText}</span>
        </div>
      )}

      {/* Hi·ªÉn th·ªã s·∫£n ph·∫©m */}
      {product && (
        <div className="mt-6 rounded-2xl border p-4 shadow-sm">
          <div className="flex items-start gap-4">
            {/* n·∫øu c√≥ ·∫£nh ƒë·∫°i di·ªán, b·∫°n map t·ª´ product.product_images[0]?.url ch·∫≥ng h·∫°n */}
            <div className="w-24 h-24 bg-gray-100 rounded-lg overflow-hidden">
              {/* <img src={product.images?.[0]?.url} alt={product.name} className="w-full h-full object-cover" /> */}
            </div>
            <div className="flex-1">
              <h3 className="text-lg font-semibold">{product.name}</h3>
              <div className="text-sm text-gray-600">SKU: {product.sku}</div>
              <div className="mt-1 font-medium">
                {Number(product.price).toLocaleString("vi-VN")} ƒë
              </div>
              <div className="mt-3 flex gap-2">
                <button
                  className="rounded-lg bg-black text-white px-4 py-2 hover:opacity-90"
                  onClick={() => onAddToCart?.(product)}
                >
                  Th√™m v√†o gi·ªè
                </button>
                <button
                  className="rounded-lg border px-4 py-2 hover:bg-gray-50"
                  onClick={() => setProduct(null)}
                >
                  Qu√©t ti·∫øp
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Loading khi g·ªçi API */}
      {loading && (
        <div className="mt-3 text-sm text-gray-600">ƒêang t·∫£i s·∫£n ph·∫©m‚Ä¶</div>
      )}
    </div>
  );
}
